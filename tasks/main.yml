---
# tasks file for lookup_ec2_ami
# Input: ami_image or ami_search_tags
# Output: ami dict if found.

- debug:
    msg: "Role lookup_ec2_ami is called with following variables:"

- name: fail if ami_image or ami_search_tags not set
  fail:
    msg: Either ami_image or ami_search_tags must be set
  when:
    - ami_image is not defined or not ami_image
    - ami_search_tags is not defined or not ami_search_tags

# Search by ami_search_tags
- block:
    - debug:
        var: ami_search_tags
        verbosity: 2

    # lookup_ec2_ami role can run twice in same playbook!!
    # Ensure it's empty before the second run
    - name: set lookup_ec2_ami_ami_search_filters to empty
      set_fact:
        lookup_ec2_ami_ami_search_filters: {}

    - name: create filters based on ami_search_tags
      set_fact:
        lookup_ec2_ami_ami_search_filters: '{{ lookup_ec2_ami_ami_search_filters|combine({"tag:"+ item.key: item.value}) }}'
      with_dict: "{{ ami_search_tags }}"
      when: ami_search_tags is defined and ami_search_tags and item.value

    - debug:
        var: lookup_ec2_ami_ami_search_filters
        verbosity: 2

    - name: Detect the latest ami image {{ role_type|default('') }} in {{ env }}
      ec2_ami_facts:
        region: "{{region}}"
        profile: "{{ ami_search_profile if ami_search_profile is defined and ami_search_profile else profile|default(omit) }}"
        filters: "{{ lookup_ec2_ami_ami_search_filters|default(omit) }}"
      register: ec2_ami_facts_out

    - name: set image fact
      set_fact:
        ami: "{{ ec2_ami_facts_out.images|sort(attribute='creation_date')|last }}"
      when: ec2_ami_facts_out.images is defined and ec2_ami_facts_out.images
  when: ami_image is not defined or not ami_image

# Search by ami_image
- block:
    - debug:
        var: ami_image
        verbosity: 2

    - name: find base AMI from id {{ ami_image }}
      ec2_ami_facts:
        image_ids: "{{ ami_image|default(omit) }}"
        region: "{{region}}"
        profile: "{{ ami_search_profile if ami_search_profile is defined and ami_search_profile else profile|default(omit) }}"
      register: ami_find
      when: ami_image is defined and ami_image

    - name: fail when ami_image not found
      fail:
        msg: "Could not find AMI image {{ ami_image }}"
      when: ami_find is not skipped and not ami_find.images

    - name: set image fact
      set_fact:
        ami: "{{ ami_find.images.0 }}"
      when: ami_find.images is defined and ami_find.images
  when: ami_image is defined and ami_image
